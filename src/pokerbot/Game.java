/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pokerbot;

import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Julio
 */
public class Game extends javax.swing.JFrame {

    BufferedImage deck, back;
    Carta[] juego;
    BitSet b;

    class Card {

        final static int CORAZONES = 0;
        final static int PICAS = 1;
        final static int DIAMANTES = 2;
        final static int TREBOLES = 3;
    }

    /**
     * Creates new form Game
     */
    void Repartir() {
        juego = new Carta[9];
        Random r = new Random();
        int x;
        for (int i = 0; i < 9; i++) {
            while (b.get(x = Math.abs(r.nextInt() % 52)) == true);
            b.set(x, true);
            juego[i] = new Carta(x);
        }
    }

    void mostrarCartas(int i) {
        Carta c1, c2, c3, c4, c5;
        c1 = c2 = c3 = c4 = c5 = new Carta(-1, 0);
        switch (i) {
            case 4:
                cargarPlayer2(juego[2], juego[3]);
            case 3:
                c5 = juego[8];
            case 2:
                c4 = juego[7];
            case 1:
                c1 = juego[4];
                c2 = juego[5];
                c3 = juego[6];
                cargarMesa(c1, c2, c3, c4, c5);
            case 0:
                cargarPlayer1(juego[0], juego[1]);

        }
    }

    void iniciarMesa() {
        cargarMesa(new Carta(-1, 0), new Carta(-1, 0), new Carta(-1, 0), new Carta(-1, 0), new Carta(-1, 0));
        cargarPlayer1(new Carta(0, 12), new Carta(2, 0));
        cargarPlayer2(new Carta(-1, 0), new Carta(-1, 0));
    }

    public Game() {
        try {
            deck = ImageIO.read(new File("src/img/poker.cards.bypx.png"));
            back = ImageIO.read(new File("src/img/playing-card-back-214x300.jpg"));
        } catch (IOException e) {
        }
        initComponents();
        iniciarMesa();

        b = new BitSet(52);
        b.set(0, 51, false);
        Repartir();
        mostrarCartas(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        table1 = new pokerbot.Table();
        playerGraphics1 = new pokerbot.PlayerGraphics();
        playerGraphics2 = new pokerbot.PlayerGraphics();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(table1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, -1, -1));
        getContentPane().add(playerGraphics1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, 320, -1));
        getContentPane().add(playerGraphics2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 320, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void cargarMesa(Carta c1, Carta c2, Carta c3, Carta c4, Carta c5) {
        table1.getTable1().setIcon(ObtenerImagen(c1));
        table1.getTable2().setIcon(ObtenerImagen(c2));
        table1.getTable3().setIcon(ObtenerImagen(c3));
        table1.getTable4().setIcon(ObtenerImagen(c4));
        table1.getTable5().setIcon(ObtenerImagen(c5));

    }

    public void cargarPlayer1(Carta c1, Carta c2) {
        playerGraphics2.getCardGraphic1().setIcon(ObtenerImagen(c1));
        playerGraphics2.getCardGraphic2().setIcon(ObtenerImagen(c2));
    }

    public void cargarPlayer2(Carta c1, Carta c2) {
        playerGraphics1.getCardGraphic1().setIcon(ObtenerImagen(c1));
        playerGraphics1.getCardGraphic2().setIcon(ObtenerImagen(c2));
    }

    public static void main(String args[]) {
        Game _this = new Game();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        _this.setVisible(true);
    }

    ImageIcon ObtenerImagen(Carta c) {
        if (c.mazo == -1) {
            return new ImageIcon(resize(back, 160, 220));
        }
        return new ImageIcon(resize(getCard(deck, c), 160, 220));
    }

    public static BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    public static BufferedImage getCard(BufferedImage bi, Carta c) {
        int x, y;
        x = c.mazo;
        y = c.valor;
        if (x == -1) {
            x = 0;
            y = 0;
        }
        System.out.println(x + " " + y);
        return bi.getSubimage(225 * y, 315 * x, 225, 315);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pokerbot.PlayerGraphics playerGraphics1;
    private pokerbot.PlayerGraphics playerGraphics2;
    private pokerbot.Table table1;
    // End of variables declaration//GEN-END:variables
}
